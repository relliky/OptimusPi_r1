/*
 * I2C.h
 *
 *  Created on: 14 Nov 2014
 *      Author: Tai
 */

#ifndef I2C_H_
#define I2C_H_

#include <stdbool.h>
#include <stdint.h>

#include "inc/hw_memmap.h"
#include "inc/hw_i2c.h"
#include "inc/hw_types.h"
#include "inc/hw_gpio.h"
#define PART_TM4C123AH6PM //Needed to make pin_map include properly, isnt used in examples
#include "driverlib/pin_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include "driverlib/i2c.h"

// Local defines
#define MAX_BYTES_IN_A_TRANSCATION	32
#define 1_BYTE						1
#define 2_BYTE						2
#define 3_BYTE						3
#define 4_BYTE						4
#define 5_BYTE						5
#define 6_BYTE						6
#define 7_BYTE						7
#define 8_BYTE						8
#define 9_BYTE						9
#define 10_BYTE						10
#define 11_BYTE						11
#define 12_BYTE						12
#define 13_BYTE						13
#define 14_BYTE						14
#define 15_BYTE						15
#define 16_BYTE						16
#define 17_BYTE						17
#define 18_BYTE						18
#define 19_BYTE						19
#define 20_BYTE						20
#define 21_BYTE						21
#define 22_BYTE						22
#define 23_BYTE						23
#define 24_BYTE						24
#define 25_BYTE						25
#define 26_BYTE						26
#define 27_BYTE						27
#define 28_BYTE						28
#define 29_BYTE						29
#define 30_BYTE						30
#define 31_BYTE						31
#define 32_BYTE						32
#define 1_WORD						2
#define 2_WORD						4
#define 3_WORD						6
#define 4_WORD						8
#define 5_WORD						10
#define 6_WORD						12
#define 7_WORD						14
#define 8_WORD						16
#define 9_WORD						18
#define 10_WORD						20
#define 11_WORD						22
#define 12_WORD						24
#define 13_WORD						26
#define 14_WORD						28
#define 15_WORD						30
#define 16_WORD						32


class I2CClass {

public:
	I2CClass();
	virtual ~I2CClass();
	int readRegisters8(uint8_t slaveAddress, uint8_t registerAddress, uint8_t* data, uint8_t len);
	//N.B. readRegisters16 CAN ONLY be used for a few registers!!! see the description for detail.
	int readRegisters16(uint8_t slaveAddress, uint8_t registerAddress, uint16_t* data, uint8_t len);
	int readBit8(uint8_t slaveAddress, uint8_t registerAddress, uint8_t bitNum, uint8_t* data);
	int readbits8(uint8_t slaveAddress, uint8_t registerAddress, uint8_t MSBLoc, uint8_t len, uint8_t* data);
	int writeRegisters8(uint8_t slaveAddress, uint8_t registerAddress, uint8_t* buf, uint8_t len);
	int writeBit8(uint8_t slaveAddress, uint8_t registerAddress, uint8_t bitNum, uint8_t data);
//	int writeBits8(uint8_t slaveAddress, uint8_t registerAddress, uint8_t MSBLoc, uint8_t len, uint8_t data);

private:
	int openI2C();
	int readI2CAByte(uint8_t slaveAddress, uint8_t registerAddress, uint8_t* buf);
	int writeI2CAByte(uint8_t slaveAddress, uint8_t registerAddress, uint8_t buf);

};

#endif /* I2C_H_ */
