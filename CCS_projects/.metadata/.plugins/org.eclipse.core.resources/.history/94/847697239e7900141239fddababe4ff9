/* 
 * File:   Logger.cpp
 * Author: matt
 * 
 * Created on 01 November 2012, 22:49
 */

#include "Logger.h"
#include "Control.h"

LoggerClass::LoggerClass(RXInterfaceClass* RXPtr, AHRSClass* AHRSPtr, const char* filename)
{
	RX = RXPtr;
	AHRS = AHRSPtr;
	sampleno = 0;
	log.str().reserve(100e6); //Allocate 100mb
	samplesSinceLastFlush = 0;
	
	std::cout << "Opening log at " << filename << std::endl;
	logFile.open(filename, std::fstream::out);
	logFile.rdbuf()->pubsetbuf(0, 0); //No buffer
	logging = true;
}

LoggerClass::~LoggerClass()
{
	logFile << log.str();
	logFile.flush();
	sync(); //Force dirty page write
	logFile.close();
}

void LoggerClass::flushIfRequired()
{
	if (samplesSinceLastFlush > 1000)
	{
		logFile << log.str();
		log.str(std::string()); //Clear log
		sync(); //Force dirty page write
		samplesSinceLastFlush = 0;
	}
	else
	{
		samplesSinceLastFlush++;
	}
}

void LoggerClass::update(float dt)
{
	if (logging)
	{
		sampleno++;
		log << sampleno << ", "
				<< dt * 1000 << ", "
				<< AHRS->getX() << ", "
				<< AHRS->getY() << ", "
				<< AHRS->getZ() << ", "
				<< AHRS->getP() << ", "
				<< AHRS->getQ() << ", "
				<< AHRS->getR() << ", "
				<< AHRS->getTemp() << ", "
				<< AHRS->getPitch() << ", "
				<< AHRS->getRoll() << ", "
				<< AHRS->getYaw() << ", "
				<< RX->getPitch() * PITCH_ANGLE_DEMAND_SCALER << ", "
				<< RX->getPitch() * PITCH_RATE_DEMAND_SCALER << ", "
				<< RX->getRoll() * ROLL_ANGLE_DEMAND_SCALER << ", "
				<< RX->getRoll() * ROLL_RATE_DEMAND_SCALER << ", "
				<< RX->getThrottle() << ", "
				<< RX->getYaw() * YAW_RATE_DEMAND_SCALER << ", "
				<< RX->getSw1() << ", "
				<< RX->getSw2() << ", "
				<< AHRS->getQuaternion().w << ", "
				<< AHRS->getQuaternion().x << ", "
				<< AHRS->getQuaternion().y << ", "
				<< AHRS->getQuaternion().z
				//Add additional logs below
				<< std::endl;
		if (!RX->getSw1())
		{
			//flushIfRequired();
		}
	}
}
