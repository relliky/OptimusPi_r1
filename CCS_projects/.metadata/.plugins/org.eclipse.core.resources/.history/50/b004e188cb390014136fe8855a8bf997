/*
 * ADC.h
 *
 *  Created on: 10 Jul 2014
 *      Author: admin
 */

#ifndef ADC_H_
#define ADC_H_

#include <stdint.h>

#include "driverlib/adc.h"
#include "driverlib/pwm.h"
#include "inc/hw_memmap.h"
#include "driverlib/pin_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"

#include "ZCDetector.h"
#include "CommutationController.h"
#include "../LED.h"
#include "IIRFilter.h"

typedef enum
{
	A, B, C
} phase_t;

class BLDCClass;
class CommutationControllerClass;

class ADCClass
{
public:
	ADCClass(uint32_t channel, CommutationControllerClass* CommutationTimerPointer, BLDCClass* motorPointer);
	virtual ~ADCClass();

	void reset();
	void enableInterrupt();
	void disableInterrupt();
	void setPhase(phase_t phase);
	bool getZCDetectedFlag();
	void clearZCDetectedFlag();
	void setZCDirection(zeroCrossingDirection_t newDirection);

private:
	void configurePeripherals(uint32_t channel);
	void releasePeripherals();

	static void ISR0Static();
	static void ISR1Static();
	void initAsADC0();
	void initAsADC1();
	void ISR();

	LEDClass LED;
	IIRFilterClass commutationFilter;
	IIRFilterClass halfDCFilter;
	ZCDetectorClass ZC;

	CommutationControllerClass* CommutationTimer;
	BLDCClass* motorParent;

	uint32_t ADC_BASE, PWM_BASE;
	uint32_t SYSCTL_PERIPH_ADC, SYSCTL_PERIPH_GPIO;
	uint32_t GPIO_PORT_BASE;
	uint32_t GPIO_PIN_A, GPIO_PIN_B, GPIO_PIN_C;
	uint32_t ADC_TRIGGER_PWM;
	uint32_t ADC_CTL_A, ADC_CTL_B, ADC_CTL_C;

	uint32_t ADCValue[8], timerValue;
	bool ZCDetectedFlag;
	uint32_t acquisitionCounter;
	uint32_t halfDC;
};

#endif /* ADC_H_ */
