/*
 * PinInterface.cpp
 *
 *  Created on: 2 Sep 2014
 *      Author: matt
 */

#include "PinInterface.h"

/**
 * Constructor
 * 
 * @param newPinName - The name of the pin this object will represent, i.e. IC0, IC1, AN4 etc.
 * @param SPIPtr - Pointer to the SPIWrapper object to communicate over
 */
PinInterface::PinInterface(pinName_t newPinName, SPIWrapper* SPIPtr)
{
	pinName = newPinName;
	SPI = SPIPtr;
	pinType = unconfiguredType;
	this->init(pinName);
}

PinInterface::~PinInterface()
{
	// TODO Auto-generated destructor stub
}

void PinInterface::setGPIOOutputState (bool state)
{
	uint32_t buf = state;
	SPI->sendMessage(OVERSEER_SET_GPIO_OUTPUT_STATUS, &buf, 1);
}

bool PinInterface::getGPIOInputState()
{
	uint32_t buf;
	SPI->getData(OVERSEER_GET_GPIO_INPUT_STATUS, &buf, 1);
	return (buf == 1);
}

uint32_t PinInterface::getInputCaptureWidth()
{
	uint32_t buf;
	SPI->getData(OVERSEER_GET_IC_WIDTH, &buf, 1);
	return buf;
}

uint32_t PinInterface::getAnalogValue()
{
	uint32_t buf;
	SPI->getData(OVERSEER_GET_ANALOG_VALUE, &buf, 1);
	return buf;
}

void PinInterface::config(pinType_t newPinType)
{
	pinType = newPinType;
	switch (pinType)
	{
	case unconfiguredType:
		break;
	case InputCaptureType:		
		SPI->sendMessage(OVERSEER_CONFIG_INPUT_CAPTURE);
		break;
	case GPIOInputType:
		SPI->sendMessage(OVERSEER_CONFIG_GPIO_INPUT);
		break;
	case GPIOOutputType:
		SPI->sendMessage(OVERSEER_CONFIG_GPIO_OUTPUT);
		break;
	case AnalogInputType:
		SPI->sendMessage(OVERSEER_CONFIG_ANALOG_INPUT);
		break;		
	}
}

void PinInterface::init(pinName_t pinName)
{
	switch (pinName)
	{
	case unconfiguredPin:
		break;
	case IC0Pin:
		initAsIC0();
		break;
	case IC1Pin:
		initAsIC1();
		break;
	case IC2Pin:
		initAsIC2();
		break;
	case IC3Pin:
		initAsIC3();
		break;
	case IC4Pin:
		initAsIC4();
		break;
	case IC5Pin:
		initAsIC5();
		break;
	case IC6Pin:
		initAsIC6();
		break;
	case IC7Pin:
		initAsIC7();
		break;
	case AN0Pin:
		initAsAN0();
		break;
	case AN1Pin:
		initAsAN1();
		break;
	case AN2Pin:
		initAsAN2();
		break;
	case AN3Pin:
		initAsAN3();
		break;
	case AN4Pin:
		initAsAN4();
		break;
	case AN5Pin:
		initAsAN5();
		break;
	}
}

void PinInterface::initAsIC0()
{
	OVERSEER_GET_IC_WIDTH = OVERSEER_GET_IC0_WIDTH;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_IC0_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_IC0_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = 0;
	OVERSEER_CONFIG_INPUT_CAPTURE = OVERSEER_CONFIG_IC0_INPUT_CAPTURE;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_IC0_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_IC0_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = 0;
}

void PinInterface::initAsIC1()
{
	OVERSEER_GET_IC_WIDTH = OVERSEER_GET_IC1_WIDTH;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_IC1_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_IC1_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = 0;
	OVERSEER_CONFIG_INPUT_CAPTURE = OVERSEER_CONFIG_IC1_INPUT_CAPTURE;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_IC1_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_IC1_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = 0;
}

void PinInterface::initAsIC2()
{
	OVERSEER_GET_IC_WIDTH = OVERSEER_GET_IC2_WIDTH;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_IC2_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_IC2_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = 0;
	OVERSEER_CONFIG_INPUT_CAPTURE = OVERSEER_CONFIG_IC2_INPUT_CAPTURE;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_IC2_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_IC2_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = 0;
}

void PinInterface::initAsIC3()
{
	OVERSEER_GET_IC_WIDTH = OVERSEER_GET_IC3_WIDTH;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_IC3_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_IC3_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = 0;
	OVERSEER_CONFIG_INPUT_CAPTURE = OVERSEER_CONFIG_IC3_INPUT_CAPTURE;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_IC3_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_IC3_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = 0;
}

void PinInterface::initAsIC4()
{
	OVERSEER_GET_IC_WIDTH = OVERSEER_GET_IC4_WIDTH;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_IC4_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_IC4_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = 0;
	OVERSEER_CONFIG_INPUT_CAPTURE = OVERSEER_CONFIG_IC4_INPUT_CAPTURE;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_IC4_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_IC4_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = 0;
}

void PinInterface::initAsIC5()
{
	OVERSEER_GET_IC_WIDTH = OVERSEER_GET_IC5_WIDTH;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_IC5_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_IC5_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = 0;
	OVERSEER_CONFIG_INPUT_CAPTURE = OVERSEER_CONFIG_IC5_INPUT_CAPTURE;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_IC5_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_IC5_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = 0;
}

void PinInterface::initAsIC6()
{
	OVERSEER_GET_IC_WIDTH = OVERSEER_GET_IC6_WIDTH;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_IC6_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_IC6_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = 0;
	OVERSEER_CONFIG_INPUT_CAPTURE = OVERSEER_CONFIG_IC6_INPUT_CAPTURE;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_IC6_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_IC6_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = 0;
}

void PinInterface::initAsIC7()
{
	OVERSEER_GET_IC_WIDTH = OVERSEER_GET_IC7_WIDTH;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_IC7_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_IC7_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = 0;
	OVERSEER_CONFIG_INPUT_CAPTURE = OVERSEER_CONFIG_IC7_INPUT_CAPTURE;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_IC7_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_IC7_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = 0;
}

void PinInterface::initAsAN0()
{
	OVERSEER_GET_IC_WIDTH = 0;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_AN0_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_AN0_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = OVERSEER_GET_AN0_ANALOG_VALUE;
	OVERSEER_CONFIG_INPUT_CAPTURE = 0;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_AN0_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_AN0_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = OVERSEER_CONFIG_AN0_ANALOG_INPUT;
}

void PinInterface::initAsAN1()
{
	OVERSEER_GET_IC_WIDTH = 0;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_AN1_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_AN1_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = OVERSEER_GET_AN1_ANALOG_VALUE;
	OVERSEER_CONFIG_INPUT_CAPTURE = 0;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_AN1_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_AN1_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = OVERSEER_CONFIG_AN1_ANALOG_INPUT;
}

void PinInterface::initAsAN2()
{
	OVERSEER_GET_IC_WIDTH = 0;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_AN2_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_AN2_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = OVERSEER_GET_AN2_ANALOG_VALUE;
	OVERSEER_CONFIG_INPUT_CAPTURE = 0;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_AN2_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_AN2_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = OVERSEER_CONFIG_AN2_ANALOG_INPUT;
}

void PinInterface::initAsAN3()
{
	OVERSEER_GET_IC_WIDTH = 0;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_AN3_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_AN3_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = OVERSEER_GET_AN3_ANALOG_VALUE;
	OVERSEER_CONFIG_INPUT_CAPTURE = 0;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_AN3_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_AN3_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = OVERSEER_CONFIG_AN3_ANALOG_INPUT;
}

void PinInterface::initAsAN4()
{
	OVERSEER_GET_IC_WIDTH = 0;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_AN4_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_AN4_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = OVERSEER_GET_AN4_ANALOG_VALUE;
	OVERSEER_CONFIG_INPUT_CAPTURE = 0;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_AN4_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_AN4_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = OVERSEER_CONFIG_AN4_ANALOG_INPUT;
}

void PinInterface::initAsAN5()
{
	OVERSEER_GET_IC_WIDTH = 0;
	OVERSEER_GET_GPIO_INPUT_STATUS = OVERSEER_GET_AN5_GPIO_INPUT_STATUS;
	OVERSEER_SET_GPIO_OUTPUT_STATUS = OVERSEER_SET_AN5_GPIO_OUTPUT_STATUS;
	OVERSEER_GET_ANALOG_VALUE = OVERSEER_GET_AN5_ANALOG_VALUE;
	OVERSEER_CONFIG_INPUT_CAPTURE = 0;
	OVERSEER_CONFIG_GPIO_OUTPUT = OVERSEER_CONFIG_AN5_GPIO_OUTPUT;
	OVERSEER_CONFIG_GPIO_INPUT = OVERSEER_CONFIG_AN5_GPIO_INPUT;
	OVERSEER_CONFIG_ANALOG_INPUT = OVERSEER_CONFIG_AN5_ANALOG_INPUT;
}
