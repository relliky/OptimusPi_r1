/*
 * RPiControlledCopter.cpp
 *
 *  Created on: 13 Mar 2015
 *      Author: Rellik
 */

#include "RPiControlledCopter.h"

RPiControlledCopterClass::RPiControlledCopterClass()
			: RPiSPISlave(0),
			  OptimusPi()
{
	// TODO Auto-generated constructor stub
}

RPiControlledCopterClass::~RPiControlledCopterClass()
{
	// TODO Auto-generated destructor stub
}

/**
 * Updates the SPI slave read buffers with new data.
 */
void RPiControlledCopterClass::updateReadBuffers()
{

	// Currently broken as 24/7 polling just floods the SPI bus, we need to either poll these registers on demand or at a fixed interval
	//	RPiSPISlave.updateReadResponse(OVERSEER_GET_MOTOR_STATUS_0, motor0.running());
	//	RPiSPISlave.updateReadResponse(OVERSEER_GET_MOTOR_STATUS_1, motor1.running());
	//	RPiSPISlave.updateReadResponse(OVERSEER_GET_MOTOR_STATUS_2, motor2.running());
	//	RPiSPISlave.updateReadResponse(OVERSEER_GET_MOTOR_STATUS_3, motor3.running());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC0_WIDTH, OptimusPi.IC0.getInputCaptureWidth());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC1_WIDTH, OptimusPi.IC1.getInputCaptureWidth());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC2_WIDTH, OptimusPi.IC2.getInputCaptureWidth());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC3_WIDTH, OptimusPi.IC3.getInputCaptureWidth());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC4_WIDTH, OptimusPi.IC4.getInputCaptureWidth());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC5_WIDTH, OptimusPi.IC5.getInputCaptureWidth());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC6_WIDTH, OptimusPi.IC6.getInputCaptureWidth());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC7_WIDTH, OptimusPi.IC7.getInputCaptureWidth());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC0_GPIO_INPUT_STATUS, OptimusPi.IC0.getGPIOInputState());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC1_GPIO_INPUT_STATUS, OptimusPi.IC1.getGPIOInputState());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC2_GPIO_INPUT_STATUS, OptimusPi.IC2.getGPIOInputState());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC3_GPIO_INPUT_STATUS, OptimusPi.IC3.getGPIOInputState());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC4_GPIO_INPUT_STATUS, OptimusPi.IC4.getGPIOInputState());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC5_GPIO_INPUT_STATUS, OptimusPi.IC5.getGPIOInputState());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC6_GPIO_INPUT_STATUS, OptimusPi.IC6.getGPIOInputState());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_IC7_GPIO_INPUT_STATUS, OptimusPi.IC7.getGPIOInputState());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_AN0_GPIO_INPUT_STATUS, OptimusPi.AN0.getGPIOInputState());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_AN1_GPIO_INPUT_STATUS, OptimusPi.AN1.getGPIOInputState());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_AN2_GPIO_INPUT_STATUS, OptimusPi.AN2.getGPIOInputState());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_AN3_GPIO_INPUT_STATUS, OptimusPi.AN3.getGPIOInputState());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_AN4_GPIO_INPUT_STATUS, OptimusPi.AN4.getGPIOInputState());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_AN5_GPIO_INPUT_STATUS, OptimusPi.AN5.getGPIOInputState());

		// read the raw data from MPU9150
		OptimusPi.MPU.updateRawSensorDataDumpedOutToRPi();
		RPiSPISlave.updateReadResponse(OVERSEER_GET_MPU_X_RAW_DATA,    OptimusPi.MPU.getRawSensorDataDumpedOutToRPi_x());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_MPU_Y_RAW_DATA,    OptimusPi.MPU.getRawSensorDataDumpedOutToRPi_y());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_MPU_Z_RAW_DATA,    OptimusPi.MPU.getRawSensorDataDumpedOutToRPi_z());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_MPU_TEMP_RAW_DATA, OptimusPi.MPU.getRawSensorDataDumpedOutToRPi_temp());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_MPU_P_RAW_DATA,    OptimusPi.MPU.getRawSensorDataDumpedOutToRPi_p());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_MPU_Q_RAW_DATA,    OptimusPi.MPU.getRawSensorDataDumpedOutToRPi_q());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_MPU_R_RAW_DATA,    OptimusPi.MPU.getRawSensorDataDumpedOutToRPi_r());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_MPU_MAGX_RAW_DATA, OptimusPi.MPU.getRawSensorDataDumpedOutToRPi_magx());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_MPU_MAGY_RAW_DATA, OptimusPi.MPU.getRawSensorDataDumpedOutToRPi_magy());
		RPiSPISlave.updateReadResponse(OVERSEER_GET_MPU_MAGZ_RAW_DATA, OptimusPi.MPU.getRawSensorDataDumpedOutToRPi_magz());

}

/**
 * Empties the message queue, performaing a switch statement on every message command in order to carry out the
 * requested operation.
 *
 * @TODO this could be implemented using a dictionary class to neaten things up
 */
void RPiControlledCopterClass::emptyMessageQueue()
{

	message_s message;
	while (RPiSPISlave.getMessage(&message))
	{
		switch (message.command)
		{
		case OVERSEER_CONFIG_MOTOR_CH0_BLDC:
			OptimusPi.motor0.config(BLDC);
			break;
		case OVERSEER_CONFIG_MOTOR_CH0_BRUSHED:
			OptimusPi.motor0.config(brushed);
			break;
		case OVERSEER_CONFIG_MOTOR_CH0_STEPPER:
			OptimusPi.motor0.config(stepper);
			break;
		case OVERSEER_CONFIG_MOTOR_CH1_BLDC:
			OptimusPi.motor1.config(BLDC);
			break;
		case OVERSEER_CONFIG_MOTOR_CH1_BRUSHED:
			OptimusPi.motor1.config(brushed);
			break;
		case OVERSEER_CONFIG_MOTOR_CH1_STEPPER:
			OptimusPi.motor1.config(stepper);
			break;
		case OVERSEER_CONFIG_MOTOR_CH2_BLDC:
			OptimusPi.motor2.config(BLDC);
			break;
		case OVERSEER_CONFIG_MOTOR_CH2_BRUSHED:
			OptimusPi.motor2.config(brushed);
			break;
		case OVERSEER_CONFIG_MOTOR_CH2_STEPPER:
			OptimusPi.motor2.config(stepper);
			break;
		case OVERSEER_CONFIG_MOTOR_CH3_BLDC:
			OptimusPi.motor3.config(BLDC);
			break;
		case OVERSEER_CONFIG_MOTOR_CH3_BRUSHED:
			OptimusPi.motor3.config(brushed);
			break;
		case OVERSEER_CONFIG_MOTOR_CH3_STEPPER:
			OptimusPi.motor3.config(stepper);
			break;
		case OVERSEER_START_MOTOR_0:
			OptimusPi.motor0.start();
			break;
		case OVERSEER_START_MOTOR_1:
			OptimusPi.motor1.start();
			break;
		case OVERSEER_START_MOTOR_2:
			OptimusPi.motor2.start();
			break;
		case OVERSEER_START_MOTOR_3:
			OptimusPi.motor3.start();
			break;
		case OVERSEER_STOP_MOTOR_0:
			OptimusPi.motor0.stop();
			break;
		case OVERSEER_STOP_MOTOR_1:
			OptimusPi.motor1.stop();
			break;
		case OVERSEER_STOP_MOTOR_2:
			OptimusPi.motor2.stop();
			break;
		case OVERSEER_STOP_MOTOR_3:
			OptimusPi.motor3.stop();
			break;
		case OVERSEER_SET_MOTOR_PWM_0:
			OptimusPi.motor0.setPower(message.parameters[0]);
			break;
		case OVERSEER_SET_MOTOR_PWM_1:
			OptimusPi.motor1.setPower(message.parameters[0]);
			break;
		case OVERSEER_SET_MOTOR_PWM_2:
			OptimusPi.motor2.setPower(message.parameters[0]);
			break;
		case OVERSEER_SET_MOTOR_PWM_3:
			OptimusPi.motor3.setPower(message.parameters[0]);
			break;
		case OVERSEER_CONFIG_IC0_INPUT_CAPTURE:
			OptimusPi.IC0.config(InputCaptureType);
			break;
		case OVERSEER_CONFIG_IC0_GPIO_OUTPUT:
			OptimusPi.IC0.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_IC0_GPIO_INPUT:
			OptimusPi.IC0.config(GPIOInputType);
			break;
		case OVERSEER_CONFIG_IC1_INPUT_CAPTURE:
			OptimusPi.IC1.config(InputCaptureType);
			break;
		case OVERSEER_CONFIG_IC1_GPIO_OUTPUT:
			OptimusPi.IC1.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_IC1_GPIO_INPUT:
			OptimusPi.IC1.config(GPIOInputType);
			break;
		case OVERSEER_CONFIG_IC2_INPUT_CAPTURE:
			OptimusPi.IC2.config(InputCaptureType);
			break;
		case OVERSEER_CONFIG_IC2_GPIO_OUTPUT:
			OptimusPi.IC2.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_IC2_GPIO_INPUT:
			OptimusPi.IC2.config(GPIOInputType);
			break;
		case OVERSEER_CONFIG_IC3_INPUT_CAPTURE:
			OptimusPi.IC3.config(InputCaptureType);
			break;
		case OVERSEER_CONFIG_IC3_GPIO_OUTPUT:
			OptimusPi.IC3.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_IC3_GPIO_INPUT:
			OptimusPi.IC3.config(GPIOInputType);
			break;
		case OVERSEER_CONFIG_IC4_INPUT_CAPTURE:
			OptimusPi.IC4.config(InputCaptureType);
			break;
		case OVERSEER_CONFIG_IC4_GPIO_OUTPUT:
			OptimusPi.IC4.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_IC4_GPIO_INPUT:
			OptimusPi.IC4.config(GPIOInputType);
			break;
		case OVERSEER_CONFIG_IC5_INPUT_CAPTURE:
			OptimusPi.IC5.config(InputCaptureType);
			break;
		case OVERSEER_CONFIG_IC5_GPIO_OUTPUT:
			OptimusPi.IC5.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_IC5_GPIO_INPUT:
			OptimusPi.IC5.config(GPIOInputType);
			break;
		case OVERSEER_CONFIG_IC6_INPUT_CAPTURE:
			OptimusPi.IC6.config(InputCaptureType);
			break;
		case OVERSEER_CONFIG_IC6_GPIO_OUTPUT:
			OptimusPi.IC6.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_IC6_GPIO_INPUT:
			OptimusPi.IC6.config(GPIOInputType);
			break;
		case OVERSEER_CONFIG_IC7_INPUT_CAPTURE:
			OptimusPi.IC7.config(InputCaptureType);
			break;
		case OVERSEER_CONFIG_IC7_GPIO_OUTPUT:
			OptimusPi.IC7.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_IC7_GPIO_INPUT:
			OptimusPi.IC7.config(GPIOInputType);
			break;
		case OVERSEER_CONFIG_AN0_ANALOG_INPUT:
			OptimusPi.AN0.config(AnalogInputType);
			break;
		case OVERSEER_CONFIG_AN0_GPIO_OUTPUT:
			OptimusPi.AN0.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_AN0_GPIO_INPUT:
			OptimusPi.AN0.config(GPIOInputType);
			break;
		case OVERSEER_CONFIG_AN1_ANALOG_INPUT:
			OptimusPi.AN1.config(AnalogInputType);
			break;
		case OVERSEER_CONFIG_AN1_GPIO_OUTPUT:
			OptimusPi.AN1.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_AN1_GPIO_INPUT:
			OptimusPi.AN1.config(GPIOInputType);
			break;
		case OVERSEER_CONFIG_AN2_ANALOG_INPUT:
			OptimusPi.AN2.config(AnalogInputType);
			break;
		case OVERSEER_CONFIG_AN2_GPIO_OUTPUT:
			OptimusPi.AN2.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_AN2_GPIO_INPUT:
			OptimusPi.AN2.config(GPIOInputType);
			break;
		case OVERSEER_CONFIG_AN3_ANALOG_INPUT:
			OptimusPi.AN3.config(AnalogInputType);
			break;
		case OVERSEER_CONFIG_AN3_GPIO_OUTPUT:
			OptimusPi.AN3.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_AN3_GPIO_INPUT:
			OptimusPi.AN3.config(GPIOInputType);
			break;
		case OVERSEER_CONFIG_AN4_ANALOG_INPUT:
			OptimusPi.AN4.config(AnalogInputType);
			break;
		case OVERSEER_CONFIG_AN4_GPIO_OUTPUT:
			OptimusPi.AN4.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_AN4_GPIO_INPUT:
			OptimusPi.AN4.config(GPIOInputType);
			break;
		case OVERSEER_CONFIG_AN5_ANALOG_INPUT:
			OptimusPi.AN5.config(AnalogInputType);
			break;
		case OVERSEER_CONFIG_AN5_GPIO_OUTPUT:
			OptimusPi.AN5.config(GPIOOutputType);
			break;
		case OVERSEER_CONFIG_AN5_GPIO_INPUT:
			OptimusPi.AN5.config(GPIOInputType);
			break;
		case OVERSEER_SET_IC0_GPIO_OUTPUT_STATUS:
			OptimusPi.IC0.setGPIOOutputState((bool) message.parameters[0]);
			break;
		case OVERSEER_SET_IC1_GPIO_OUTPUT_STATUS:
			OptimusPi.IC1.setGPIOOutputState((bool) message.parameters[0]);
			break;
		case OVERSEER_SET_IC2_GPIO_OUTPUT_STATUS:
			OptimusPi.IC2.setGPIOOutputState((bool) message.parameters[0]);
			break;
		case OVERSEER_SET_IC3_GPIO_OUTPUT_STATUS:
			OptimusPi.IC3.setGPIOOutputState((bool) message.parameters[0]);
			break;
		case OVERSEER_SET_IC4_GPIO_OUTPUT_STATUS:
			OptimusPi.IC4.setGPIOOutputState((bool) message.parameters[0]);
			break;
		case OVERSEER_SET_IC5_GPIO_OUTPUT_STATUS:
			OptimusPi.IC5.setGPIOOutputState((bool) message.parameters[0]);
			break;
		case OVERSEER_SET_IC6_GPIO_OUTPUT_STATUS:
			OptimusPi.IC6.setGPIOOutputState((bool) message.parameters[0]);
			break;
		case OVERSEER_SET_IC7_GPIO_OUTPUT_STATUS:
			OptimusPi.IC7.setGPIOOutputState((bool) message.parameters[0]);
			break;
		case OVERSEER_SET_AN0_GPIO_OUTPUT_STATUS:
			OptimusPi.AN0.setGPIOOutputState((bool) message.parameters[0]);
			break;
		case OVERSEER_SET_AN1_GPIO_OUTPUT_STATUS:
			OptimusPi.AN1.setGPIOOutputState((bool) message.parameters[0]);
			break;
		case OVERSEER_SET_AN2_GPIO_OUTPUT_STATUS:
			OptimusPi.AN2.setGPIOOutputState((bool) message.parameters[0]);
			break;
		case OVERSEER_SET_AN3_GPIO_OUTPUT_STATUS:
			OptimusPi.AN3.setGPIOOutputState((bool) message.parameters[0]);
			break;
		case OVERSEER_SET_AN4_GPIO_OUTPUT_STATUS:
			OptimusPi.AN4.setGPIOOutputState((bool) message.parameters[0]);
			break;
		case OVERSEER_SET_AN5_GPIO_OUTPUT_STATUS:
			OptimusPi.AN5.setGPIOOutputState((bool) message.parameters[0]);
			break;
		}
	}


}

	
