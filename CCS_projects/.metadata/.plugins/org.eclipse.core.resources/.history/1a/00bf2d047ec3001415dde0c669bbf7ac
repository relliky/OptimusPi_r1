/* 
 * File:   Control.cpp
 * Author: matt
 * 
 * Created on 08 November 2012, 16:05
 */

#include "Control.h"

ControlClass::ControlClass()//(std::string logFilename)
		: ratePitchPID(RATE_KP, RATE_KI, RATE_KD, RATE_INTEGRAL_LIMIT, RATE_OUTPUT_LIMIT),
				rateRollPID(RATE_KP, RATE_KI, RATE_KD, RATE_INTEGRAL_LIMIT, RATE_OUTPUT_LIMIT),
				rateYawPID(YAW_RATE_KP, YAW_RATE_KI, YAW_RATE_KD, YAW_RATE_INTEGRAL_LIMIT, YAW_RATE_OUTPUT_LIMIT),
				attitudePitchPID(ATTITUDE_KP, ATTITUDE_KI, ATTITUDE_KD, ATTITUDE_INTEGRAL_LIMIT, ATTITUDE_OUTPUT_LIMIT),
				attitudeRollPID(ATTITUDE_KP, ATTITUDE_KI, ATTITUDE_KD, ATTITUDE_INTEGRAL_LIMIT, ATTITUDE_OUTPUT_LIMIT),
				AHRS(),
				OptimusPi(),
				Motors(&OptimusPi),
				RX(&OptimusPi),
				timer(this)
//				,
//				Logger(&RX, &AHRS, logFilename.c_str())
{

	motorsStarted = false;

}

ControlClass::~ControlClass()
{

}

void ControlClass::enable()
{
	Motors.startMotor(frontLeft);
	Motors.startMotor(frontRight);
	Motors.startMotor(rearLeft);
	Motors.startMotor(rearRight);
	motorsStarted = true;
//	timer.start();
}

void ControlClass::disable()
{
//	timer.stop();
}

void ControlClass::update(float dt)
{
	RX.update();
	AHRS.update(dt);
	this->updateControl(dt);
//	Logger.update(dt);
}

void ControlClass::updateControl(float dt)
{
	// Check safety kill switch
	if (RX.getSw2())
	{
		if (motorsStarted == false)
		{
			Motors.startMotor(frontLeft);
			Motors.startMotor(frontRight);
			Motors.startMotor(rearRight);
			Motors.startMotor(rearLeft);
			motorsStarted = true;
		}
		if (RX.getSw1())
		{
			attitudeControl(RX.getThrottle(), RX.getPitch() * PITCH_ANGLE_DEMAND_SCALER,
					RX.getRoll() * ROLL_ANGLE_DEMAND_SCALER, RX.getYaw() * YAW_RATE_DEMAND_SCALER, dt);
		}
		else
		{
			rateControl(RX.getThrottle(), RX.getPitch() * PITCH_RATE_DEMAND_SCALER,
					RX.getRoll() * ROLL_RATE_DEMAND_SCALER,
					RX.getYaw() * YAW_RATE_DEMAND_SCALER, dt);
		}
	}
	else
	{
		Motors.stopMotor(frontLeft);
		Motors.stopMotor(frontRight);
		Motors.stopMotor(rearRight);
		Motors.stopMotor(rearLeft);
		motorsStarted = false;
	}
}

void ControlClass::attitudeControl(float throttle, float pitchAngleDemand, float rollAngleDemand, float yawRateDemand,
		float dt)
{
	float pitchRateDemand = attitudePitchPID.calculate(AHRS.getPitch(), pitchAngleDemand, dt);
	float rollRateDemand = attitudeRollPID.calculate(AHRS.getRoll(), rollAngleDemand, dt);
	rateControl(throttle, pitchRateDemand, rollRateDemand, yawRateDemand, dt);
}

void ControlClass::rateControl(float throttle, float pitchRateDemand, float rollRateDemand, float yawRateDemand,
		float dt)
{
	float pitchMotorModifier = ratePitchPID.calculate(AHRS.getP(), pitchRateDemand, dt);
	float rollMotorModifier = rateRollPID.calculate(AHRS.getQ(), rollRateDemand, dt);
	float yawMotorModifier = rateYawPID.calculate(AHRS.getR(), yawRateDemand, dt);

	updatePWM(throttle, pitchMotorModifier, rollMotorModifier, yawMotorModifier);
}

void ControlClass::updatePWM(float throttle, float pitchModifier, float rollModifier, float yawModifier)
{
	Motors.setMotorPower(frontLeft,
			(uint32_t) ((throttle * (MAX_THROTTLE - MIN_THROTTLE)) + MIN_THROTTLE - pitchModifier + rollModifier + yawModifier));
	Motors.setMotorPower(frontRight,
			(uint32_t) ((throttle * (MAX_THROTTLE - MIN_THROTTLE)) + MIN_THROTTLE - pitchModifier - rollModifier - yawModifier));
	Motors.setMotorPower(rearRight,
			(uint32_t) ((throttle * (MAX_THROTTLE - MIN_THROTTLE)) + MIN_THROTTLE + pitchModifier - rollModifier + yawModifier));
	Motors.setMotorPower(rearLeft,
			(uint32_t) ((throttle * (MAX_THROTTLE - MIN_THROTTLE)) + MIN_THROTTLE + pitchModifier + rollModifier - yawModifier));
}

void ControlClass::setRatePID(float KP, float KI, float KD)
{
	ratePitchPID.setPID(KP, KI, KD);
	rateRollPID.setPID(KP, KI, KD);
}

void ControlClass::getRatePID()
{
	ratePitchPID.printPID();
	rateRollPID.printPID();
}

void ControlClass::setAttitudePID(float KP, float KI, float KD)
{
	attitudePitchPID.setPID(KP, KI, KD);
	attitudeRollPID.setPID(KP, KI, KD);
}

void ControlClass::getAttitudePID()
{
	attitudePitchPID.printPID();
	attitudeRollPID.printPID();
}

void ControlClass::setYawRatePID(float KP, float KI, float KD)
{
	rateYawPID.setPID(KP, KI, KD);
}

void ControlClass::getYawRatePID()
{
	rateYawPID.printPID();
}

inline void ControlClass::constrain(double* value, float range)
{
	if (*value > range)
		*value = range;
	else if (*value < -range)
		*value = -range;
}

