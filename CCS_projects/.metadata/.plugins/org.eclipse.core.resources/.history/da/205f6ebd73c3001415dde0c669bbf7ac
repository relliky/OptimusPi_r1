/*
 * TimerFunction.cpp
 *
 *  Created on: 4 Mar 2015
 *      Author: Rellik
 *      Comment: This class has a problem in liniking symbols.   --Tai  3rd/Mar/2014
 *      Solution: Declear the the timerclass pointer as static in cpp file rather than in headfile.
 */

#include "GPTimer.h"

static GPTimerClass* Timer;



GPTimerClass::GPTimerClass()
			:LED0(0)
{

	dt = 1;
	Timer = this;
	SYSCTL_PERIPH_TIMER = SYSCTL_PERIPH_TIMER2;
	TIMER_BASE = TIMER2_BASE;
	TIMER = TIMER_A;
	INT_TIMERnA_TM4C123 = INT_TIMER0A_TM4C123;

	// Enable the timer peripheral
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER);

}

GPTimerClass::~GPTimerClass()
{
	// TODO Auto-generated destructor stub
	Timer->stop();
}

void GPTimerClass::config()
{
}

void GPTimerClass::start()
{

	// Ensure the timer is disabled
	TimerDisable(TIMER_BASE, TIMER);
	// Configure the timer as a periodic up counter 32bit
	TimerConfigure(TIMER_BASE, TIMER_CFG_PERIODIC_UP);
	// Ensure the timer interrupt is disabled
	TimerIntDisable(TIMER_BASE, TIMER_TIMA_TIMEOUT);
	// Clear the interrupt source now it is disabled and have no source to trigger it.
	TimerIntClear(TIMER_BASE, TIMER_TIMA_TIMEOUT);
	// Register one of the two static interrupt handlers to the peripheral
	TimerIntRegister(TIMER_BASE, TIMER, ISRStatic);
	// Set the interrupt priority
	IntPrioritySet(INT_TIMERnA_TM4C123, 0); // @TODO - What should this actually be?

	// The timer interrupt is set to be called at 10Hz. Therefore, dt is 0.1.
	// 25s in the real life is 30s in the target board as set-up.Therefore, it needs to multiply a factor 30/25=6/5
	static uint32_t loadval = SysCtlClockGet()/1*6/5;
	//Counting from 0 up to the loaded value. Trigger interrupt when the value reaching this value.
	TimerLoadSet(TIMER_BASE, TIMER, loadval);
	//Slow down the clock of the timer by dividing the master clock frequency by 0xFF.
	//TimerPrescaleSet(TIMER_BASE, TIMER, 0xFFFF);

	//Set up timer as a interrupt souce
	TimerIntEnable(TIMER_BASE, TIMER_TIMA_TIMEOUT);
	//Enable the timer hardware module. The timer hardware starts to work now.
	TimerEnable(TIMER_BASE, TIMER);

}

void GPTimerClass::stop()
{
	TimerIntDisable(TIMER_BASE, TIMER_TIMA_TIMEOUT);
	TimerDisable(TIMER_BASE, TIMER);
	TimerIntClear(TIMER_BASE, TIMER_TIMA_TIMEOUT);

}


interrupt void GPTimerClass::ISRStatic()
{
	Timer->ISR();
}

void GPTimerClass::ISR()
{
	static uint32_t i = 0, j=0;
	static uint32_t loadv = TimerLoadGet(TIMER_BASE, TIMER);
	static uint32_t systemcloclk = SysCtlClockGet();

	//It's ISR's responsiblity to clear the interrupt flag, and otherwise the ISR is just being called all the time since the interrupt flag is not cleared and is always triggered.
	TimerIntClear(TIMER_BASE, TIMER_TIMA_TIMEOUT);


//printf("Input load value is %x, Load Value is %x\n systemcloclk is %d\n", loadv,systemcloclk);



		LED0.toggle();


}
