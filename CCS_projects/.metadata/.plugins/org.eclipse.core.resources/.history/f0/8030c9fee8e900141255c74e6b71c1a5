/*
 * MessageParser.cpp
 *
 *  Created on: 6 Aug 2014
 *      Author: admin
 */

#include "MessageParser.h"




/**
 * Constructor. Initialises the commandInfo array depending on whether the MCU is defined as the overseer or motor controller.
 */
MessageParserClass::MessageParserClass()
{
	// Initializes commandInfo array with number of parameters and direction, and initializes the read response.
#ifdef MCU_OVERSEER
	commandInfo[DUMMY_BYTE] 							= (commandInfo_s){0,	write,	0};

	commandInfo[OVERSEER_CONFIG_MOTOR_CH0_BLDC]		 	= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_MOTOR_CH0_STEPPER]	 	= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_MOTOR_CH0_BRUSHED]	 	= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_MOTOR_CH1_BLDC]		 	= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_MOTOR_CH1_STEPPER]	 	= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_MOTOR_CH1_BRUSHED]	 	= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_MOTOR_CH2_BLDC]		 	= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_MOTOR_CH2_STEPPER]	 	= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_MOTOR_CH2_BRUSHED]	 	= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_MOTOR_CH3_BLDC]		 	= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_MOTOR_CH3_STEPPER]	 	= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_MOTOR_CH3_BRUSHED]	 	= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_START_MOTOR_0] 				= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_START_MOTOR_1] 				= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_START_MOTOR_2] 				= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_START_MOTOR_3] 				= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_STOP_MOTOR_0]					= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_STOP_MOTOR_1] 					= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_STOP_MOTOR_2] 					= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_STOP_MOTOR_3] 					= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_SET_MOTOR_PWM_0] 				= (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_MOTOR_PWM_1] 				= (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_MOTOR_PWM_2] 				= (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_MOTOR_PWM_3] 				= (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_GET_MOTOR_STATUS_0] 			= (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_MOTOR_STATUS_1] 			= (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_MOTOR_STATUS_2] 			= (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_MOTOR_STATUS_3] 			= (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_CONFIG_IC0_INPUT_CAPTURE]     	= (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC0_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC0_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC1_INPUT_CAPTURE]      = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC1_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC1_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC2_INPUT_CAPTURE]      = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC2_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC2_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC3_INPUT_CAPTURE]      = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC3_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC3_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC4_INPUT_CAPTURE]      = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC4_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC4_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC5_INPUT_CAPTURE]      = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC5_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC5_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC6_INPUT_CAPTURE]      = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC6_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC6_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC7_INPUT_CAPTURE]      = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC7_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_IC7_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN0_ANALOG_INPUT]       = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN0_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN0_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN1_ANALOG_INPUT]       = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN1_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN1_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN2_ANALOG_INPUT]       = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN2_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN2_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN3_ANALOG_INPUT]       = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN3_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN3_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN4_ANALOG_INPUT]       = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN4_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN4_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN5_ANALOG_INPUT]       = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN5_GPIO_OUTPUT]        = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_CONFIG_AN5_GPIO_INPUT]         = (commandInfo_s){0, 	write, 	0};
	commandInfo[OVERSEER_GET_IC0_WIDTH]                 = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC1_WIDTH]                 = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC2_WIDTH]                 = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC3_WIDTH]                 = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC4_WIDTH]                 = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC5_WIDTH]                 = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC6_WIDTH]                 = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC7_WIDTH]                 = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC0_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC1_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC2_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC3_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC4_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC5_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC6_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_IC7_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_AN0_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_AN1_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_AN2_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_AN3_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_AN4_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_AN5_GPIO_INPUT_STATUS]     = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_SET_IC0_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_IC1_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_IC2_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_IC3_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_IC4_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_IC5_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_IC6_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_IC7_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_AN0_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_AN1_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_AN2_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_AN3_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_AN4_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_SET_AN5_GPIO_OUTPUT_STATUS]    = (commandInfo_s){1, 	write, 	0};
	commandInfo[OVERSEER_GET_AN0_ANALOG_VALUE]			= (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_AN1_ANALOG_VALUE]			= (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_AN2_ANALOG_VALUE]			= (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_AN3_ANALOG_VALUE]			= (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_AN4_ANALOG_VALUE]			= (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_AN5_ANALOG_VALUE]			= (commandInfo_s){1, 	read, 	0};
	// read the raw data from MPU9150
	commandInfo[OVERSEER_GET_MPU_X_RAW_DATA]            = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_MPU_Y_RAW_DATA]            = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_MPU_Z_RAW_DATA]            = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_MPU_TEMP_RAW_DATA]         = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_MPU_P_RAW_DATA]            = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_MPU_Q_RAW_DATA]            = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_MPU_R_RAW_DATA]            = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_MPU_MAGX_RAW_DATA]         = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_MPU_MAGY_RAW_DATA]         = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_MPU_MAGZ_RAW_DATA]         = (commandInfo_s){1, 	read, 	0};

	commandInfo[OVERSEER_GET_MPU_X_RAW_DATA]            = (commandInfo_s){1, 	read, 	0};
	commandInfo[OVERSEER_GET_MPU_X_RAW_DATA]            = (commandInfo_s){1, 	read, 	0};

#endif

#ifdef MCU_BLDC
	commandInfo[MOTOR_CONTROLLER_CONFIG_CH0_BLDC] 			= (commandInfo_s){0, 	write, 	0};
	commandInfo[MOTOR_CONTROLLER_CONFIG_CH0_STEPPER] 		= (commandInfo_s){0, 	write, 	0};
	commandInfo[MOTOR_CONTROLLER_CONFIG_CH0_BRUSHED] 		= (commandInfo_s){0, 	write, 	0};
	commandInfo[MOTOR_CONTROLLER_CONFIG_CH1_BLDC] 			= (commandInfo_s){0, 	write, 	0};
	commandInfo[MOTOR_CONTROLLER_CONFIG_CH1_STEPPER] 		= (commandInfo_s){0, 	write, 	0};
	commandInfo[MOTOR_CONTROLLER_CONFIG_CH1_BRUSHED] 		= (commandInfo_s){0, 	write, 	0};
	commandInfo[MOTOR_CONTROLLER_BLDC_START_MOTOR_0] 		= (commandInfo_s){0, 	write, 	0};
	commandInfo[MOTOR_CONTROLLER_BLDC_START_MOTOR_1] 		= (commandInfo_s){0, 	write, 	0};
	commandInfo[MOTOR_CONTROLLER_BLDC_SET_MOTOR_0_DUTY] 	= (commandInfo_s){1, 	write, 	0};
	commandInfo[MOTOR_CONTROLLER_BLDC_SET_MOTOR_1_DUTY] 	= (commandInfo_s){1, 	write, 	0};
	commandInfo[MOTOR_CONTROLLER_BLDC_STOP_MOTOR_0] 		= (commandInfo_s){0, 	write, 	0};
	commandInfo[MOTOR_CONTROLLER_BLDC_STOP_MOTOR_1] 		= (commandInfo_s){0, 	write, 	0};
	commandInfo[MOTOR_CONTROLLER_BLDC_GET_STATUS_0] 		= (commandInfo_s){1, 	read, 	0};
	commandInfo[MOTOR_CONTROLLER_BLDC_GET_STATUS_1] 		= (commandInfo_s){1, 	read, 	0};
#endif

}

MessageParserClass::~MessageParserClass()
{
	// TODO Auto-generated destructor stub
}

/**
 * Cross references the command to determine the expected number of parameters
 *
 * @param command - Command to be examined
 * @return Required number of parameters
 */
uint32_t MessageParserClass::getNumberOfParams(uint8_t command)
{
	return commandInfo[command].numberOfParameters;
}

/**
 * Returns the direction of the command, either write or read. Returning read means the slave needs to respond with
 * the readResponse data, returning write means write parameters are to be expected.
 *
 * @param command - command from SPICommands.h
 * @return - Enum, read or write
 */
direction_t MessageParserClass::getDirection(uint8_t command)
{
	return commandInfo[command].direction;
}

/**
 * Returns the value of the readResponse variable for the specified command. This must be populated
 * before the data is requested.
 *
 * @param command - command from SPICommands.h
 * @return - 32bit read response
 */
uint32_t MessageParserClass::getReadResponse(uint8_t command)
{
	return commandInfo[command].readResponse;
}

/**
 * Updates the readResponse variable, which will be transmitted to the master upon request.
 *
 * @param command - command from SPICommands.h
 * @param data - 32bit read response.
 */
void MessageParserClass::updateReadResponse(uint8_t command, uint32_t data)
{
	commandInfo[command].readResponse = data;
}
