/* 
 * File:   Control.h
 * Author: matt
 *
 * Created on 08 November 2012, 16:05
 */

#ifndef CONTROL_H
#define	CONTROL_H

#include "PID/PID.h"
#include "AHRS/AHRS.h"
#include "RX/RXInterface.h"
#include "MotorInterface/MotorInterface.h"
#include <src/OverseerOptimusPiInterface/OptimusPiInterface.h>
#include "Timer.h"
#include "Logger.h"


#define PITCH_ANGLE_DEMAND_SCALER 30.0f
#define ROLL_ANGLE_DEMAND_SCALER 30.0f
#define PITCH_RATE_DEMAND_SCALER 90.0f
#define ROLL_RATE_DEMAND_SCALER 90.0f
#define YAW_RATE_DEMAND_SCALER 50.0f
#define MAX_THROTTLE 700
#define MIN_THROTTLE 200

#define RATE_KP 1.0f
#define RATE_KI 1.5f
#define RATE_KD 0.0f
#define RATE_INTEGRAL_LIMIT 0.5f
#define RATE_OUTPUT_LIMIT 300
#define YAW_RATE_KP 4.0f
#define YAW_RATE_KI 2.0f
#define YAW_RATE_KD 0.0f
#define YAW_RATE_INTEGRAL_LIMIT 0.5f
#define YAW_RATE_OUTPUT_LIMIT 300
#define ATTITUDE_KP 3.0f
#define ATTITUDE_KI 0.7f
#define ATTITUDE_KD 0.02f
#define ATTITUDE_INTEGRAL_LIMIT 1.0f
#define ATTITUDE_OUTPUT_LIMIT 1000


struct s_orientation
{
	double phi;
	double psi;
	double theta;
};

class ControlClass
{
public:
	ControlClass(std::string logFilename);
	virtual ~ControlClass();
	
	void enable();
	void disable();
	void update(float dt);
	void setRatePID(float KP, float KI, float KD);
	void getRatePID();
	void setAttitudePID(float KP, float KI, float KD);
	void getAttitudePID();
	void setYawRatePID(float KP, float KI, float KD);
	void getYawRatePID();

private:
	void updateControl(float dt);
	void rateControl(float throttle, float pitchRateDemand, float rollRateDemand, float yawRateDemand, float dt);
	void attitudeControl(float throttle, float pitchAngleDemand, float rollAngleDemand, float yawRateDemand, float dt);
	void updatePWM(float throttle, float pitchModifier, float rollModifier, float yawModifier);
	void constrain(double* value, float range);

	OptimusPiInterfaceClass OptimusPi;
	MotorInterfaceClass Motors;
public:
	RXInterfaceClass RX;
	AHRSClass AHRS;	
private:
	PIDClass ratePitchPID, rateRollPID, rateYawPID;
	PIDClass attitudePitchPID, attitudeRollPID;
	TimerClass timer;
	LoggerClass Logger;
	
	bool motorsStarted;
};


#endif	/* CONTROL_H */

