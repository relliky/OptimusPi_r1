/* 
 * File:   Timer.cpp
 * Author: matt
 * 
 * Created on 05 November 2012, 10:19
 */

#include "Timer.h"
#include "Control.h"

#define PERIOD 10000000 // nanoseconds

static TimerClass* timerPtr = 0;

TimerClass::TimerClass(ControlClass* controlPtr)
{
	if (timerPtr == 0)
	{
		control = controlPtr;
		timerPtr = this;

		// Connect a signal handler routine to the SIGALRM signal
		signal(SIGALRM, &sigHandlerStatic);

		if (timer_create(CLOCK_MONOTONIC, 0, &timerId) < 0)
		{
			std::cerr << "Failed to create timer, errno " << std::endl;
		}

		enabled = false;

		dt = 0;
	}
	else
	{
		std::cout << "Tried to create multiple timers, exiting" << std::endl;
		exit(1);
	}
}

TimerClass::~TimerClass()
{
	this->stop();
}

float TimerClass::getDt()
{
	return dt;
}

void TimerClass::start()
{
	struct itimerspec timeToSet;
	timeToSet.it_value.tv_nsec = PERIOD;
	timeToSet.it_value.tv_sec = 0;
	timeToSet.it_interval.tv_nsec = PERIOD;
	timeToSet.it_interval.tv_sec = 0;

	if (timer_settime(timerId, 0, &timeToSet, NULL) < 0)
	{
		std::cerr << "Failed to set timer value, errno " << std::endl;
	}

//	timer.it_interval.tv_sec = 0;
//	timer.it_interval.tv_usec = PERIOD;
//	timer.it_value.tv_sec = 0;
//	timer.it_value.tv_usec = PERIOD;
//
//	if (setitimer(ITIMER_REAL, &timer, NULL) < 0)
//	{
//		std::cerr << "Failed to set itimer, errno " << std::endl;
//	}

	enabled = true;
}

void TimerClass::stop()
{
	struct itimerspec timeToSet;
	timeToSet.it_value.tv_nsec = 0;
	timeToSet.it_value.tv_sec = 0;
	timeToSet.it_interval.tv_nsec = 0;
	timeToSet.it_interval.tv_sec = 0;

	if (timer_settime(timerId, 0, &timeToSet, NULL) < 0)
	{
		std::cerr << "Failed to set timer value, errno " << std::endl;
	}

//	struct itimerval t;
//	t.it_interval.tv_sec = 0;
//	t.it_interval.tv_usec = 0;
//	t.it_value.tv_sec = 0;
//	t.it_value.tv_usec = 0;
//
//	if (setitimer(ITIMER_REAL, &t, NULL))
//	{
//		std::cerr << "Failed to set itimer, errno " << std::endl;
//	}

	enabled = false;
}

void TimerClass::calcdt()
{
	oldtime = time;
	clock_gettime(CLOCK_MONOTONIC, &time);
	dt = ((static_cast<int64_t>(time.tv_sec) * 1000000000 + static_cast<int64_t>(time.tv_nsec))
			- (static_cast<int64_t>(oldtime.tv_sec) * 1000000000 + static_cast<int64_t>(oldtime.tv_nsec)))
			/ 1000000000.0;
}

void TimerClass::ISR()
{
	this->calcdt();
//	std::cout << "TimerISR " << dt << std::endl;
	control->update(dt); // Callback to control parent
}

void TimerClass::sigHandlerStatic(int signum)
{
	timerPtr->ISR();
}
