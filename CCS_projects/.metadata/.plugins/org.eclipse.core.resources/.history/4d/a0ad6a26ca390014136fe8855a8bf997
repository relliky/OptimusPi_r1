/*
 * ADC.cpp
 *
 *  Created on: 10 Jul 2014
 *      Author: admin
 *
 *  Configures either the ADC0 or ADC1 peripherals and contains an ISR for each.
 */

#include "ADC.h"
#include "BLDC.h"

static ADCClass* ADC0;
static ADCClass* ADC1;

/**
 * Constructor
 *
 * @param channel - either 0 or 1, maps to ADC0 and ADC1
 * @param CommutationTimerPointer - Pointer to the motors commutation timer object, allows the ADC interrupt to control the timer based on the detection of ZC events
 * @param motorPointer - pointer to the parent motor object, allowing the ADC interrupt to change the motor state
 */
ADCClass::ADCClass(uint32_t channel, CommutationControllerClass* CommutationTimerPointer, BLDCClass* motorPointer)
		: LED(channel), commutationFilter(1, 3), halfDCFilter(1, 255)
{
	CommutationTimer = CommutationTimerPointer;
	motorParent = motorPointer;

	timerValue = 0;
	ZCDetectedFlag = false;
	acquisitionCounter = 0;
	halfDC = 0;

	configurePeripherals(channel);
}

ADCClass::~ADCClass()
{
	this->releasePeripherals();
}

void ADCClass::initAsADC0()
{
	SYSCTL_PERIPH_ADC = SYSCTL_PERIPH_ADC0;
	SYSCTL_PERIPH_GPIO = SYSCTL_PERIPH_GPIOE;
	GPIO_PORT_BASE = GPIO_PORTE_BASE;
	GPIO_PIN_A = GPIO_PIN_0;
	GPIO_PIN_B = GPIO_PIN_1;
	GPIO_PIN_C = GPIO_PIN_2;
	PWM_BASE = PWM0_BASE;
	ADC_BASE = ADC0_BASE;
	ADC_TRIGGER_PWM = ADC_TRIGGER_PWM0;
	ADC_CTL_A = ADC_CTL_CH3;
	ADC_CTL_B = ADC_CTL_CH2;
	ADC_CTL_C = ADC_CTL_CH1;

	ADC0 = this;
}

void ADCClass::initAsADC1()
{
	SYSCTL_PERIPH_ADC = SYSCTL_PERIPH_ADC1;
	SYSCTL_PERIPH_GPIO = SYSCTL_PERIPH_GPIOD;
	GPIO_PORT_BASE = GPIO_PORTD_BASE;
	GPIO_PIN_A = GPIO_PIN_0;
	GPIO_PIN_B = GPIO_PIN_1;
	GPIO_PIN_C = GPIO_PIN_2;
	PWM_BASE = PWM1_BASE;
	ADC_BASE = ADC1_BASE;
	ADC_TRIGGER_PWM = ADC_TRIGGER_PWM1;
	ADC_CTL_A = ADC_CTL_CH7;
	ADC_CTL_B = ADC_CTL_CH6;
	ADC_CTL_C = ADC_CTL_CH5;

	ADC1 = this;
}

void ADCClass::configurePeripherals(uint32_t channel)
{
	channel ? initAsADC1() : initAsADC0();

	SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIO);
	GPIOPinTypeADC(GPIO_PORT_BASE, GPIO_PIN_A | GPIO_PIN_B | GPIO_PIN_C);
	PWMGenIntTrigEnable(PWM_BASE, PWM_GEN_0, PWM_TR_CNT_LOAD); // Enable PWM trigger generation at center of high period
	ADCSequenceConfigure(ADC_BASE, 0, ADC_TRIGGER_PWM, 0);
	ADCIntRegister(ADC_BASE, 0, channel ? ISR1Static : ISR0Static);
	ADCSequenceEnable(ADC_BASE, 0);
}

void ADCClass::releasePeripherals()
{
	ADCIntDisable(ADC_BASE, 0);
	ADCSequenceDisable(ADC_BASE, 0);
	ADCIntUnregister(ADC_BASE, 0);
	SysCtlPeripheralDisable(SYSCTL_PERIPH_ADC);
}

void ADCClass::reset()
{
	disableInterrupt();
	timerValue = 0;
	ZCDetectedFlag = false;
	ZC.reset();
	acquisitionCounter = 0;
	commutationFilter.reset();
	halfDCFilter.reset();
}

uint32_t ADCClass::getMeasurement()
{
	return ADCValue[0];
}

uint32_t ADCClass::getMeasurementTime()
{
	return timerValue;
}

void ADCClass::enableInterrupt()
{
	ADCIntEnable(ADC_BASE, 0);
}

void ADCClass::disableInterrupt()
{
	ADCIntDisable(ADC_BASE, 0);
}

void ADCClass::setPhase(phase_t phase)
{
	switch (phase)
	{
	case A:
		ADCSequenceStepConfigure(ADC_BASE, 0, 0, ADC_CTL_A | ADC_CTL_END | ADC_CTL_IE);
		break;
	case B:
		ADCSequenceStepConfigure(ADC_BASE, 0, 0, ADC_CTL_B | ADC_CTL_END | ADC_CTL_IE);
		break;
	case C:
		ADCSequenceStepConfigure(ADC_BASE, 0, 0, ADC_CTL_C | ADC_CTL_END | ADC_CTL_IE);
		break;
	}

	/*switch(phase)
	 {
	 case A:
	 ADCSequenceStepConfigure(ADC_BASE, 0, 0, ADC_CTL_A);
	 ADCSequenceStepConfigure(ADC_BASE, 0, 1, ADC_CTL_B);
	 ADCSequenceStepConfigure(ADC_BASE, 0, 2, ADC_CTL_C | ADC_CTL_END | ADC_CTL_IE);
	 break;
	 case B:
	 ADCSequenceStepConfigure(ADC_BASE, 0, 0, ADC_CTL_B);
	 ADCSequenceStepConfigure(ADC_BASE, 0, 1, ADC_CTL_A);
	 ADCSequenceStepConfigure(ADC_BASE, 0, 2, ADC_CTL_C | ADC_CTL_END | ADC_CTL_IE);
	 break;
	 case C:
	 ADCSequenceStepConfigure(ADC_BASE, 0, 0, ADC_CTL_C);
	 ADCSequenceStepConfigure(ADC_BASE, 0, 1, ADC_CTL_B);
	 ADCSequenceStepConfigure(ADC_BASE, 0, 2, ADC_CTL_A | ADC_CTL_END | ADC_CTL_IE);
	 break;
	 }*/
}

bool ADCClass::getZCDetectedFlag()
{
	return ZCDetectedFlag;
}

void ADCClass::clearZCDetectedFlag()
{
	ZCDetectedFlag = false;
}

void ADCClass::setZCDirection(zeroCrossingDirection_t newDirection)
{
	ZC.setZCDirection(newDirection);
}

interrupt void ADCClass::ISR0Static()
{
	ADC0->ISR();
}

interrupt void ADCClass::ISR1Static()
{
	ADC1->ISR();
}

void ADCClass::ISR()
{
	disableInterrupt();
	ADCIntClear(ADC_BASE, 0);
	ADCSequenceDataGet(ADC_BASE, 0, ADCValue);
	timerValue = CommutationTimer->getValue();

//	halfDC = halfDCFilter.iterate((ADCValue[1] + ADCValue[2]) / 2);
	halfDC = (ADCValue[1] + ADCValue[2]) / 2;

	switch (motorParent->getState())
	{
	case stopped:
		break;

	case align:
		break;

	case openloop:
		break;

	case acquisition:
		if (ZC.ZCDetected(ADCValue[0], timerValue, 971))
		{
			LED.toggle();
			if (CommutationTimer->ZCDuringPreviousCommutation == false)
				acquisitionCounter = 0;
			acquisitionCounter++;
			commutationFilter.iterate(timerValue);
			ZCDetectedFlag = true;
			if (acquisitionCounter >= 2)
			{
				CommutationTimer->setTimeoutValue(2 * commutationFilter.iterate(timerValue));
				ZCDetectedFlag = true;
				LED.toggle();
				motorParent->setState(closedloop);
				CommutationTimer->enableTimerInterrupt();
			}
		}
		else
		{
			enableInterrupt();
		}
		break;
	case closedloop:
		if (ZC.ZCDetected(ADCValue[0], timerValue, 971))
		{
			CommutationTimer->setTimeoutValue(2 * commutationFilter.iterate(timerValue));
			ZCDetectedFlag = true;
			LED.toggle();
			CommutationTimer->enableTimerInterrupt();
		}
		else
		{
			enableInterrupt();
			ZCDetectedFlag = false;
		}
		break;

	case lost_lock:
		break;

	default:
			while(1){}
			break;
	}
}
