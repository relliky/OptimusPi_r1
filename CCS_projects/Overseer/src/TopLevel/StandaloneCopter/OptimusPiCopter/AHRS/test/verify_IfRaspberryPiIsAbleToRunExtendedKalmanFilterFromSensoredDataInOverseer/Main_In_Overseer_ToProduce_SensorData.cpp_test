/*
 * main.c
 *
 *
 *
 *
 * Communicate with BLDC - done
 * Read data from MPU - done
 * Communicate with both motor controllers - done
 * @TODO Bounce programming data from pi to BLDC controllers
 * Add input capture support - done
 * Add input capture SPI interface - done
 * Add GPIO input and output - done
 * @TODO Create motor status register to allow overseer to monitor rotation status
 * @TODO Add initial speed parameter to motor startup command
 * @TODO Add motor rotation direction change command
 */

#define MCU_OVERSEER

#include "Overseer.h"


//#include "OptimusPiCopter/AHRS/AHRS.h"

    #include <vector>
	class TestDataClass
	{
	public:
		float Pitch, Roll, Yaw, X, Y, Z, Temp, P, Q, R;
	};

void main(void)
{

	SysCtlClockSet(SYSCTL_SYSDIV_2_5 | SYSCTL_USE_PLL | SYSCTL_OSC_INT);

//	ArbitratorClass Arbitrator;
//	Arbitrator.start();

/*
    motor1.config(BLDC);
	motor1.start();
*/




	#define DEBUG
	#undef DEBUG
	#ifdef DEBUG
			DebugFunctionClass Debug_0;
			Debug_0.RunTests();
	#endif

/*
	ControlClass Control;
	Control.enable();

*/

/*
	LEDClass LED1(1);
	LED1.set();
*/

//	GPTimerClass Timer1(NULL);
//	Timer1.start();

//	LEDClass LED0(0);
//	LED0.set();

/*
	while(1){

		LED1.toggle();

		float oneSecDelay = 66666666/2.6666666/2;
		int   delay = (int)(oneSecDelay/10);
		SysCtlDelay(delay);
	} //Loop here to serve timer interrupt

*/

/*
	OptimusPiInterfaceClass OptimusPi;

	OptimusPiInterfaceClass* OptPiPtr;

	OptPiPtr = &OptimusPi;
	RXInterfaceClass RX_0(OptPiPtr);

	while(1){RX_0.update();}

*/




	//struct Test_s {float a,b;};




	OptimusPiInterfaceClass OptimusPi;
	AHRSClass AHRS(&OptimusPi);


	printf("\nThis is MPU9150 scaledSensoredData in AHRS before AHRS.update().fuse(dt) function. dt=0.05 <=> 200Hz.\n");

	std::vector<TestDataClass> TestData(20);

	for(int i = 0; i<20; i++)
	{
		float dt = 0.005;//200Hz
		float oneSecDelay = 66666666/2.6666666/2;
		int   delay = (int)(oneSecDelay*dt);
		SysCtlDelay(delay);


		 AHRS.update(dt);
		 TestData.at(i).X = AHRS.getX();
		 TestData.at(i).Y = AHRS.getY();
		 TestData.at(i).Z = AHRS.getZ();
		 TestData.at(i).P = AHRS.getP();
		 TestData.at(i).Q = AHRS.getQ();
		 TestData.at(i).R = AHRS.getR();
		 TestData.at(i).Temp = AHRS.getTemp();

	}


			int j = 0;
			for(j=0;j<20;j++)
			{
				printf("//This is TestData set %d .\n",j);
				printf("TestData.at(%d).X = %f; \n",j, TestData.at(j).X);
				printf("TestData.at(%d).Y = %f; \n",j, TestData.at(j).Y);
				printf("TestData.at(%d).Z = %f; \n",j, TestData.at(j).Z);
				printf("TestData.at(%d).P = %f; \n",j, TestData.at(j).P);
				printf("TestData.at(%d).Q = %f; \n",j, TestData.at(j).Q);
				printf("TestData.at(%d).R = %f; \n",j, TestData.at(j).R);
				printf("TestData.at(%d).Temp = %f; \n",j, TestData.at(j).Temp);
				printf("\n");
			}

			while(1);




/*
		for(int i=0; i<50; i++)
		{

				float dt = 0.005;//200Hz
				float oneSecDelay = 66666666/2.6666666/2;
				int   delay = (int)(oneSecDelay*dt);
				SysCtlDelay(delay);


			static float Pitch, PitchM;
			static float Roll, RollM;
			static float Yaw, YawM;
			static float X;
			static float Y;
			static float Z;
			static float P;
			static float Q;
			static float R;
			static float Temp;

			 AHRS.update(dt);
			 Pitch = AHRS.getPitch();
			 Roll = AHRS.getRoll();
			 Yaw = AHRS.getYaw();
			// Data fused out still is approching to 0.



			 if(PitchM >= Pitch) {PitchM = Pitch;}
			 if(PitchM >= Roll) {RollM = Roll;}
			 if(YawM >= Yaw) {YawM = Yaw;}
		}
		printf("Pitch is %f\n",Pitch);
		printf("Roll is %f\n",Roll);
		printf("Yaw is %f\n",Yaw);
		printf("x is %f\n",AHRS.scaledSensorData.x);
		printf("y is %f\n",AHRS.scaledSensorData.y);
		printf("z is %f\n", AHRS.scaledSensorData.z);
		printf("p is %f\n",AHRS.scaledSensorData.p);
		printf("q is %f\n",AHRS.scaledSensorData.q);
		printf("r is %f\n", AHRS.scaledSensorData.r);

	}

*/


/*

	while(1)
	{

		//updateReadBuffers();
		//emptyMessageQueue();

		motor1.setPWMWidth(0xA0);

	}

*/

//	EigenTestClass EigenTest;
//	EigenTest.runEigenTests();
	while(1){}

}



